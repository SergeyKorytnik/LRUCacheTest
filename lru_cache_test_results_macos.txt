local time: 2016-12-19 16:04:47 +0300
Compiler: Clang(1)
running basic sanity tests..
testing LRUCache(std::map + custom double linked list over vector + std::allocator)
testing LRUCache(std::unordered_map + custom double linked list over vector + std::allocator)
testing LRUCache(std::map + custom double linked list over vector + boost::fast_pool_allocator)
testing LRUCache(std::unordered_map + custom double linked list over vector + boost::fast_pool_allocator)
testing LRUCache(std::map + std::list + std::allocator)
testing LRUCache(std::unordered_map + std::list + std::allocator)
testing LRUCache(std::map + std::list + boost::fast_pool_allocator)
testing LRUCache(std::unordered_map + std::list + boost::fast_pool_allocator)
testing LRUCache(boost::intrusive::set + boost::intrusive::list)
testing LRUCache(boost::intrusive::unordered_set + boost::intrusive::list)
testing LRUCache(boost::multi_index_container + ordered_unique + std::allocator)
testing LRUCache(boost::multi_index_container + hashed_unique + std::allocator)
testing LRUCache(boost::multi_index_container + ordered_unique + boost::fast_pool_allocator)
testing LRUCache(boost::multi_index_container + hashed_unique + boost::fast_pool_allocator)
testing LRUCache(emilib::HashMap + custom double linked list over vector)
testing LRUCache(emilib::HashMap + boost::intrusive::list)
done
generating random test sequence...
generating 16000000 keys using uniform_int_distribution( 119435657, 119471897)
generating put/get flag sequence of 16000000 booleans using bernoulli_distribution(0.33)
done
running performance tests for cacheSize = 2048
Iteration #0................
Iteration #1................
Iteration #2................
Iteration #3................
Iteration #4................
done
validating results consistency..
done
all tests reported the following sequence statistic:
	CacheHitCount:          605628
	CacheMissCount:         10110010
	KeyInsertionCount:      4985256
	TotalPutOperationCount: 5284362
generating random test sequence...
generating 16000000 keys using uniform_int_distribution( 232508, 234108)
generating put/get flag sequence of 16000000 booleans using bernoulli_distribution(0.33)
done
running performance tests for cacheSize = 65536
Iteration #0................
Iteration #1................
Iteration #2................
Iteration #3................
Iteration #4................
done
validating results consistency..
done
all tests reported the following sequence statistic:
	CacheHitCount:          10716367
	CacheMissCount:         3144
	KeyInsertionCount:      1601
	TotalPutOperationCount: 5280489
The first test sequence results summary:
Test Name, Average Running time(ms), Average Absolute Running Time Deviation(ms)
LRUCache(std::map + custom double linked list over vector + std::allocator), 1910.96, 13.74
LRUCache(std::unordered_map + custom double linked list over vector + std::allocator), 592.833, 23.42
LRUCache(std::map + custom double linked list over vector + boost::fast_pool_allocator), 1591.3, 8.063
LRUCache(std::unordered_map + custom double linked list over vector + boost::fast_pool_allocator), 483.599, 1.466
LRUCache(std::map + std::list + std::allocator), 2380.05, 7.274
LRUCache(std::unordered_map + std::list + std::allocator), 1028.72, 5.664
LRUCache(std::map + std::list + boost::fast_pool_allocator), 1706.93, 0.3094
LRUCache(std::unordered_map + std::list + boost::fast_pool_allocator), 627.148, 0.3173
LRUCache(boost::intrusive::set + boost::intrusive::list), 1744.56, 1.548
LRUCache(boost::intrusive::unordered_set + boost::intrusive::list), 231.083, 0.08752
LRUCache(boost::multi_index_container + ordered_unique + std::allocator), 2282.29, 8.019
LRUCache(boost::multi_index_container + hashed_unique + std::allocator), 623.542, 1.815
LRUCache(boost::multi_index_container + ordered_unique + boost::fast_pool_allocator), 2093.98, 0.8674
LRUCache(boost::multi_index_container + hashed_unique + boost::fast_pool_allocator), 534.668, 1.201
LRUCache(emilib::HashMap + custom double linked list over vector), 3460.39, 0.9625
LRUCache(emilib::HashMap + boost::intrusive::list), 3550.59, 1.028
The second test sequence results summary:
Test Name, Average Running time(ms), Average Absolute Running Time Deviation(ms)
LRUCache(std::map + custom double linked list over vector + std::allocator), 1528.61, 2.283
LRUCache(std::unordered_map + custom double linked list over vector + std::allocator), 194.723, 2.415
LRUCache(std::map + custom double linked list over vector + boost::fast_pool_allocator), 1245.89, 1.436
LRUCache(std::unordered_map + custom double linked list over vector + boost::fast_pool_allocator), 207.37, 1.218
LRUCache(std::map + std::list + std::allocator), 1306.72, 2.476
LRUCache(std::unordered_map + std::list + std::allocator), 165.691, 0.8344
LRUCache(std::map + std::list + boost::fast_pool_allocator), 1243.83, 1.461
LRUCache(std::unordered_map + std::list + boost::fast_pool_allocator), 188.075, 0.9265
LRUCache(boost::intrusive::set + boost::intrusive::list), 1068.64, 0.2738
LRUCache(boost::intrusive::unordered_set + boost::intrusive::list), 132.071, 0.4553
LRUCache(boost::multi_index_container + ordered_unique + std::allocator), 1271.75, 15.34
LRUCache(boost::multi_index_container + hashed_unique + std::allocator), 170.661, 0.8825
LRUCache(boost::multi_index_container + ordered_unique + boost::fast_pool_allocator), 1280.04, 1.924
LRUCache(boost::multi_index_container + hashed_unique + boost::fast_pool_allocator), 171.662, 0.2572
LRUCache(emilib::HashMap + custom double linked list over vector), 251.63, 0.7633
LRUCache(emilib::HashMap + boost::intrusive::list), 231.474, 0.6201
